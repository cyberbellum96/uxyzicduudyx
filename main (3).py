# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ Python
import json
import logging
import os
from datetime import datetime, timedelta
from threading import Thread
from typing import Dict, Any
from collections import defaultdict

# –°—Ç–æ—Ä–æ–Ω–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import nest_asyncio
import asyncio
from flask import Flask
from pytz import timezone
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.events import EVENT_JOB_ERROR

# Telegram-—Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
    constants,
    Bot,
)
from telegram.ext import (
    ApplicationHandlerStop,
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
BLACKLIST_FILE = "blacklist.json"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
nest_asyncio.apply()


def load_config(file_path):
    # –î–æ–∑–≤–æ–ª–µ–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥
    allowed_directory = os.path.realpath("config")
    # –ê–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    absolute_file_path = os.path.realpath(file_path)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    if not file_path.endswith(".json"):
        raise ValueError("–î–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ —Ñ–∞–π–ª–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º .json.")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ñ–∞–π–ª —É –¥–æ–∑–≤–æ–ª–µ–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–∑—ñ
    if not absolute_file_path.startswith(allowed_directory):
        raise ValueError("–î–æ—Å—Ç—É–ø –¥–æ —Ñ–∞–π–ª—É –∑–∞ –º–µ–∂–∞–º–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")

    # –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ, –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ñ–∞–π–ª
    with open(absolute_file_path, "r") as file:
        return json.load(file)


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
config = load_config("config.json")


def check_time():
    kyiv_tz = timezone("Europe/Kyiv")
    current_time = datetime.now(kyiv_tz)
    logging.info("–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –≤ –£–∫—Ä–∞—ó–Ω—ñ: %s", current_time)


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),  # –í–∫–∞–∑—É—î–º–æ —Ñ–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
        logging.StreamHandler(),  # –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–≤–æ–¥–∏–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    ],
)

# –ü—Ä–æ–±–Ω–∏–π –∑–∞–ø–∏—Å —É –ª–æ–≥
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler //–¢—É—Ç
CHOOSING_ACTION, AWAITING_REPORT, AWAITING_PHOTOS = range(3)


app = Flask("__name__")

# –î–æ–¥–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
daily_stats = {
    "buying": 0,  # –ö—É–ø—ñ–≤–ª—è
    "selling": 0,  # –ü—Ä–æ–¥–∞–∂
    "announcement": 0,  # –û–≥–æ–ª–æ—à–µ–Ω–Ω—è
    "advertising": 0,  # –†–µ–∫–ª–∞–º–∞
}

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
TOKEN = config["TOKEN"]
ADMIN_IDS = config["ADMIN_IDS"]
MODERATOR_IDS = config["MODERATOR_IDS"]
PAYMENT_CARD = config["PAYMENT_CARD"]
RULES_LINK = config["RULES_LINK"]


@app.route("/")
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"


def run_flask():
  app.run(host="127.0.0.1", port=1488)


# //–¢—É—Ç


# –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_post_counts = defaultdict(lambda: {"count": 0, "reset_time": datetime.now()})
user_report_counts = defaultdict(lambda: {"count": 0, "reset_time": datetime.now()})


# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ä–º–∏
BASE_URL = config["BASE_URL"]

FORMS_URL = {
    "–ö—É–ø—ñ–≤–ª—è": f"{BASE_URL}?type=buying",
    "–ü—Ä–æ–¥–∞–∂": f"{BASE_URL}?type=selling",
    "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è": f"{BASE_URL}?type=announcement",
    "–†–µ–∫–ª–∞–º–∞": f"{BASE_URL}?type=advertising",
}


def get_main_keyboard():
    buttons = [
        [
            KeyboardButton(
                text="–ö—É–ø—ñ–≤–ª—è", web_app=WebAppInfo(url=FORMS_URL["–ö—É–ø—ñ–≤–ª—è"])
            ),
            KeyboardButton(text="–ü—Ä–æ–¥–∞–∂", web_app=WebAppInfo(url=FORMS_URL["–ü—Ä–æ–¥–∞–∂"])),
        ],
        [
            KeyboardButton(
                text="–û–≥–æ–ª–æ—à–µ–Ω–Ω—è", web_app=WebAppInfo(url=FORMS_URL["–û–≥–æ–ª–æ—à–µ–Ω–Ω—è"])
            ),
            KeyboardButton(
                text="–†–µ–∫–ª–∞–º–∞", web_app=WebAppInfo(url=FORMS_URL["–†–µ–∫–ª–∞–º–∞"])
            ),
        ],
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def handle_scheduler_error(event):
    logging.error("–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: %s", event.exception)


def check_and_update_limits(user_id, limit_type="post"):
    current_time = datetime.now()
    if limit_type == "post":
        user_data = user_post_counts[user_id]
        max_limit = 5
    else:
        user_data = user_report_counts[user_id]
        max_limit = 10

    if current_time - user_data["reset_time"] > timedelta(days=1):
        user_data["count"] = 0
        user_data["reset_time"] = current_time

    if user_data["count"] >= max_limit:
        return False

    user_data["count"] += 1
    return True


class BlacklistEntry:
    def __init__(self, user_id: int, end_date: datetime, reason: str):
        self.user_id = user_id
        self.end_date = end_date
        self.reason = reason

    def to_dict(self) -> Dict[str, Any]:
        return {
            "user_id": self.user_id,
            "end_date": self.end_date.isoformat(),
            "reason": self.reason,
        }

    @staticmethod
    def from_dict(data: Dict[str, Any]) -> "BlacklistEntry":
        return BlacklistEntry(
            user_id=data["user_id"],
            end_date=datetime.fromisoformat(data["end_date"]),
            reason=data["reason"],
        )


def load_blacklist() -> Dict[int, BlacklistEntry]:
    try:
        with open(BLACKLIST_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            return {
                int(user_id): BlacklistEntry.from_dict(entry_data)
                for user_id, entry_data in data.items()
            }
    except FileNotFoundError:
        return {}


def save_blacklist(blacklist: Dict[int, BlacklistEntry]):
    with open(BLACKLIST_FILE, "w", encoding="utf-8") as file:
        json.dump(
            {str(user_id): entry.to_dict() for user_id, entry in blacklist.items()},
            file,
            indent=2,
            ensure_ascii=False,
        )


BLACKLIST: Dict[int, BlacklistEntry] = load_blacklist()


async def notify_user(bot: Bot, user_id: int, text: str):
    try:
        await bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logging.error(
            "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %d: %s", user_id, e
        )


async def blacklist_middleware(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user:
        return

    user_id = update.effective_user.id
    if user_id in BLACKLIST:
        entry = BLACKLIST[user_id]
        if entry.end_date > datetime.now():
            remaining_time = entry.end_date - datetime.now()
            days = remaining_time.days
            hours = remaining_time.seconds // 3600
            await update.message.reply_text(
                f"‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—å–æ–≥–æ –±–æ—Ç–∞.\n"
                f"‚è≥ –¢–µ—Ä–º—ñ–Ω –±–ª–æ–∫—É–≤–∞–Ω–Ω—è: {days}–¥ {hours}–≥\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {entry.reason}",
            )
            raise ApplicationHandlerStop()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    context.user_data.clear()

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=get_main_keyboard()
    )
    return CHOOSING_ACTION


async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ
    context.user_data.clear()

    keyboard = ReplyKeyboardMarkup([["–ù–∞–¥—ñ—Å–ª–∞—Ç–∏", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"]], resize_keyboard=True)
    await update.message.reply_text(
        "–°—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ —Å–≤–æ—î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, "
        "—Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
        reply_markup=keyboard,
    )
    return AWAITING_REPORT


async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text

    if message_text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
        context.user_data.clear()
        return await start(update, context)

    if message_text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏":
        if not context.user_data.get("report_message"):
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è."
            )
            return AWAITING_REPORT

        if not check_and_update_limits(update.effective_user.id, "report"):
            await update.message.reply_text(
                "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤–∏—á–µ—Ä–ø–∞–Ω–æ, "
                "–∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –∑–∞–≤—Ç—Ä–∞.",
                reply_markup=get_main_keyboard(),
            )
            context.user_data.clear()
            return CHOOSING_ACTION

        report_message = context.user_data["report_message"]
        user = update.effective_user
        admin_message = f"""
–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!
ID: {user.id}
–Ü–º'—è: {user.first_name} {user.last_name if user.last_name else ''}
Username: @{user.username if user.username else '–Ω–µ–º–∞—î'}
–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è: {report_message}
"""
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(chat_id=admin_id, text=admin_message)
            except Exception as e:
                logging.error(
                    "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É %d: %s", admin_id, e
                )

        await update.message.reply_text(
            "–î—è–∫—É—î–º–æ –∑–∞ –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –≤–∂–µ –æ–ø—Ä–∞—Ü—å–æ–≤—É—é—Ç—å –π–æ–≥–æ",
            reply_markup=get_main_keyboard(),
        )
        context.user_data.clear()
        return CHOOSING_ACTION
    else:
        context.user_data["report_message"] = message_text
        await update.message.reply_text(
            "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏' –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–±–æ '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
        )
        return AWAITING_REPORT


async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data.clear()
        user = update.effective_user

        if not check_and_update_limits(user.id, "post"):
            await update.message.reply_text(
                "–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. "
                "–î–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /report",
                reply_markup=get_main_keyboard(),
            )
            return CHOOSING_ACTION

        data = json.loads(update.effective_message.web_app_data.data)
        form_type = data.get("formType", "–Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø")

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if form_type in daily_stats:
            daily_stats[form_type] += 1
            logging.info("–î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç —Ç–∏–ø—É %s", form_type)

        context.user_data["form_data"] = data
        context.user_data["form_type"] = form_type
        context.user_data["user"] = user
        context.user_data["formatted_message"] = format_message(data, form_type, user)

        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –¥–æ –≤–∞—à–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ).\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –æ–¥–Ω—É –∑–∞ –æ–¥–Ω–æ—é.\n"
            "–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' ‚¨áÔ∏è",
            reply_markup=ReplyKeyboardMarkup([["–ó–∞–≤–µ—Ä—à–∏—Ç–∏"]], resize_keyboard=True),
        )

        return AWAITING_PHOTOS

    except Exception as e:
        logging.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏: %s", e)
        context.user_data.clear()
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_main_keyboard(),
        )
        return CHOOSING_ACTION


def can_add_photo(user_data):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é."""
    if "photos" not in user_data:
        user_data["photos"] = []
    return len(user_data["photos"]) < 10


async def add_photo(user_data, photo_file_id):
    """–î–æ–¥–∞—î —Ñ–æ—Ç–æ –¥–æ —Å–ø–∏—Å–∫—É, —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ."""
    if can_add_photo(user_data):
        user_data["photos"].append(photo_file_id)
        return True
    return False


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "photos" not in context.user_data:
        context.user_data["photos"] = []

    if update.message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        return await finish_with_photos(update, context)

    if not can_add_photo(context.user_data):
        await update.message.reply_text(
            "–í–∏ –≤–∂–µ –¥–æ–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π (10).\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏', —â–æ–± –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."
        )
        return AWAITING_PHOTOS

    try:
        photo_file_id = update.message.photo[-1].file_id
        if await add_photo(context.user_data, photo_file_id):
            await update.message.reply_text(
                f"–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ! ({len(context.user_data['photos'])}/10)\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç–∏'."
            )
        else:
            await update.message.reply_text(
                "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ."
            )
    except Exception as e:
        logging.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ: %s", e)
        await update.message.reply_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

    return AWAITING_PHOTOS


async def finish_with_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.user_data.get("formatted_message"):
            await update.message.reply_text(
                "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start",
                reply_markup=get_main_keyboard(),
            )
            context.user_data.clear()
            return CHOOSING_ACTION

        formatted_message = context.user_data["formatted_message"]
        photos = context.user_data.get("photos", [])
        user = context.user_data["user"]

        for moderator_id in MODERATOR_IDS:
            try:
                await context.bot.send_message(
                    chat_id=moderator_id, text=formatted_message, parse_mode="HTML"
                )

                for photo_id in photos:
                    caption = f"–§–æ—Ç–æ –≤—ñ–¥: {user.first_name} {user.last_name if user.last_name else ''} (@{user.username if user.username else '–Ω–µ–º–∞—î'})"
                    await context.bot.send_photo(
                        chat_id=moderator_id, photo=photo_id, caption=caption
                    )
            except Exception as e:
                logging.error(
                    "–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É %d: %s", moderator_id, e
                )

        await update.message.reply_text(
            "–î—è–∫—É—î–º–æ! –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ —Ç–∞ –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –ø—ñ—Å–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.",
            reply_markup=get_main_keyboard(),
        )

        context.user_data.clear()
        return CHOOSING_ACTION

    except Exception as e:
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏: %s", e)
        context.user_data.clear()
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_main_keyboard(),
        )
        return CHOOSING_ACTION


# –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –æ–∫—Ä–µ–º–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö
MESSAGE_TEMPLATES = {
    "user_info": {
        "default": """üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {first_name} {last_name}
üîó Username: @{username}
üÜî User ID: {user_id}""",
        "with_paid": """üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {first_name} {last_name}
üîó Username: @{username}
üÜî User ID: {user_id}
üí≥ Paid: {is_pinned}""",
        "advertising": """üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {first_name} {last_name}
üîó Username: @{username}
üÜî User ID: {user_id}
üìù Type: {ad_type}
üí∞ Price: {price} –≥—Ä–Ω
‚è± Period: {duration}""",
    },
    "content": {
        "advertising": """<pre>üì¢ –†–µ–∫–ª–∞–º–∞

üè∑Ô∏è –ù–∞–∑–≤–∞: {company_name}
üìù –û–ø–∏—Å: {description}
üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contact}

‚úèÔ∏èÔ∏è –ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:
@slavuta_ads_bot</pre>
""",
        "buying": """<pre>üõí –ö—É–ø—ñ–≤–ª—è

üè∑Ô∏è –ù–∞–∑–≤–∞: {product_name}
üìù –û–ø–∏—Å: {description}
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ: {max_price} {currency}
üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contact}

üîç–°—Ö–æ–∂—ñ –∑–∞–ø–∏—Ç–∏:
#{category}

‚úèÔ∏è –ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:
@slavuta_ads_bot</pre>
""",
        "selling": """<pre>üõí –ü—Ä–æ–¥–∞–∂

üè∑Ô∏è –ù–∞–∑–≤–∞: {item_name}
üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {price_info} {negotiable}
üì¶ –°—Ç–∞–Ω: {condition}
üìù –û–ø–∏—Å: {description}
üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contact}

üîç –°—Ö–æ–∂—ñ —Ç–æ–≤–∞—Ä–∏:
#{category}

‚úèÔ∏è –ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:
@slavuta_ads_bot</pre>
""",
        "announcement": """<pre>üì∞ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è

üìù –û–ø–∏—Å: {description}
üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contact}

üîç –°—Ö–æ–∂—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:
#{category}

‚úèÔ∏è –ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:
@slavuta_ads_bot</pre>
""",
    },
}


def get_price_info(data):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ü—ñ–Ω—É"""
    if data.get("isFree"):
        return "–í—ñ–¥–¥–∞–º –¥–∞—Ä–æ–º"
    if data.get("priceType") == "negotiablePrice":
        return "–î–æ–≥–æ–≤—ñ—Ä–Ω–∞"
    return f"{data.get('price', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')} {data.get('priceCurrency', '–≥—Ä–Ω')}"


def format_user_info(user, form_type, data):
    """–§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_data = {
        "first_name": user.first_name,
        "last_name": user.last_name if user.last_name else "",
        "username": user.username if user.username else "–Ω–µ–º–∞—î",
        "user_id": user.id,
    }

    if form_type == "advertising":
        return MESSAGE_TEMPLATES["user_info"]["advertising"].format(
            **user_data,
            ad_type=data.get("adType", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            price=data.get("finalPrice", "0"),
            duration=data.get("duration", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
        )
    elif form_type in ["buying", "selling", "announcement"]:
        return MESSAGE_TEMPLATES["user_info"]["with_paid"].format(
            **user_data, is_pinned="–¢–∞–∫" if data.get("isPinned") else "–ù—ñ"
        )
    else:
        return MESSAGE_TEMPLATES["user_info"]["default"].format(**user_data)


def format_message(data, form_type, user):
    """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ñ–æ—Ä–º–∏"""
    user_info = format_user_info(user, form_type, data)

    if form_type == "advertising":
        content = MESSAGE_TEMPLATES["content"]["advertising"].format(
            company_name=data.get("companyName", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            description=data.get("adDescription", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            contact=data.get("adContact", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
        )
    elif form_type == "buying":
        content = MESSAGE_TEMPLATES["content"]["buying"].format(
            product_name=data.get("productName", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            description=data.get("buyerDescription", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            max_price=data.get("maxPrice", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            currency=data.get("maxPriceCurrency", "–≥—Ä–Ω"),
            contact=data.get("buyerContact", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            category=data.get("buyingCategory", "").lower(),
        )
    elif form_type == "selling":
        content = MESSAGE_TEMPLATES["content"]["selling"].format(
            item_name=data.get("itemName", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            price_info=get_price_info(data),
            negotiable="(–¢–æ—Ä–≥)" if data.get("isNegotiable") else "",
            condition=data.get("condition", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            description=data.get("sellerDescription", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            contact=data.get("sellerContact", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            category=data.get("sellingCategory", "").lower(),
        )
    else:  # announcement
        content = MESSAGE_TEMPLATES["content"]["announcement"].format(
            description=data.get("description", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            contact=data.get("contact", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"),
            category=data.get("category", "").lower(),
        )

    return f"{user_info}\n{content}"


def check_bot_status():
    logging.info("–ë–æ—Ç –ø—Ä–∞—Ü—é—î. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É.")


# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞


async def adm_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /adm_help, –∞–ª–µ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    response = (
        "üìâ /reset_counters <user_id> - –°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å —Ç–∞ –∑–≤–µ—Ä–Ω–µ–Ω—å\n"
        "üìä /view_counters <user_id> - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "üë• /list_users - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º\n"
        "üìà /check_stats - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å\n"
        "üó®Ô∏è /ans <user_id> <text> - –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É\n"
        "üö´ /ban <user_id> <days> <reason> - –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "üîì /unban <user_id> - –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "üóëÔ∏è /blacklist - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫"
    )

    await update.message.reply_text(response)
    logging.info("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.", update.effective_user.id)


async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∑ –≤–∫–∞–∑–∞–Ω–Ω—è–º —Ç–µ—Ä–º—ñ–Ω—É —Ç–∞ –ø—Ä–∏—á–∏–Ω–∏."""
    if not update.effective_user:
        return

    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /ban, –∞–ª–µ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    if not context.args:
        await update.message.reply_text(
            "‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ban <user_id> <days> <reason>"
        )
        return

    if len(context.args) < 3:
        await update.message.reply_text(
            "‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ban <user_id> <days> <reason>"
        )
        return

    try:
        user_id = int(context.args[0])
        days = int(context.args[1])
        reason = " ".join(context.args[2:])

        if days <= 0:
            await update.message.reply_text("‚ùó–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0.")
            return

        end_date = datetime.now() + timedelta(days=days)

        BLACKLIST[user_id] = BlacklistEntry(user_id, end_date, reason)
        save_blacklist(BLACKLIST)

        ban_message = (
            f"‚õîÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –Ω–∞ {days} –¥–Ω—ñ–≤.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )

        try:
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–±–∞–Ω–µ–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await notify_user(context.bot, user_id, ban_message)
        except Exception as e:
            logging.error(
                "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %d: %s", user_id, str(e)
            )
            await update.message.reply_text(
                "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
            )

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await update.message.reply_text(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–Ω–∏–π –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É\n"
            f"‚è≥ –î–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )

        logging.info(
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d –∑–∞–±–∞–Ω–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d –Ω–∞ %d –¥–Ω—ñ–≤. –ü—Ä–∏—á–∏–Ω–∞: %s",
            update.effective_user.id,
            user_id,
            days,
            reason,
        )

    except ValueError as e:
        await update.message.reply_text(
            "‚ùó–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:\n"
            "- user_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º\n"
            "- –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º"
        )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ ban: %s", str(e))
    except Exception as e:
        await update.message.reply_text(
            "‚ùó–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
        logging.error("–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ ban: %s", str(e))


async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É."""
    if not update.effective_user:
        return

    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /unban, –∞–ª–µ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if len(context.args) != 1:
        await update.message.reply_text("‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /unban <user_id>")
        return

    try:
        user_id = int(context.args[0])
        if user_id in BLACKLIST:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω—É –¥–ª—è –ª–æ–≥—É
            ban_reason = BLACKLIST[user_id].reason

            # –í–∏–¥–∞–ª—è—î–º–æ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            del BLACKLIST[user_id]
            save_blacklist(BLACKLIST)

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            unban_message = (
                "‚úÖ –í–∞—à—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –±—É–ª–∏ –∑–Ω—è—Ç—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –º–æ–∂–µ—Ç–µ –¥–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.\n"
                "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –ø–æ—Ä—É—à—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º.\n"
                f"üìã –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –º–æ–∂–Ω–∞ —Ç—É—Ç: {RULES_LINK}"
            )
            await notify_user(context.bot, user_id, unban_message)

            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await update.message.reply_text(
                f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.",
            )

            logging.info(
                "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d (–±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∑–∞: %s)",
                update.effective_user.id,
                user_id,
                ban_reason,
            )
        else:
            await update.message.reply_text(
                f"‚ùó–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É.",
            )
    except ValueError:
        await update.message.reply_text(
            "‚ùó–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id (—á–∏—Å–ª–æ)."
        )


async def check_bans(bot: Bot):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–Ω—ñ–≤ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É."""
    try:
        current_time = datetime.now()
        users_to_unban = [
            user_id
            for user_id, entry in BLACKLIST.items()
            if entry.end_date <= current_time
        ]

        for user_id in users_to_unban:
            unban_message = (
                "‚úÖ –í–∞—à—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–Ω—è—Ç—ñ, –º–æ–∂–µ—Ç–µ –¥–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.\n"
                "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –ø–æ—Ä—É—à—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º.\n"
                f"üìã –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –º–æ–∂–Ω–∞ —Ç—É—Ç: {RULES_LINK}"
            )

            await notify_user(bot, user_id, unban_message)

            del BLACKLIST[user_id]
            save_blacklist(BLACKLIST)

            logging.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d –±—É–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.", user_id)

    except Exception as e:
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –±–∞–Ω—ñ–≤: %s", e)


async def view_blacklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É."""
    if not update.effective_user:
        return

    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /blacklist, –∞–ª–µ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if not BLACKLIST:
        await update.message.reply_text("üìã –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        blacklist_text = "üìã –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
        for user_id, entry in BLACKLIST.items():
            remaining_time = entry.end_date - datetime.now()
            days = remaining_time.days
            hours = remaining_time.seconds // 3600
            blacklist_text += (
                f"üÜî ID: {user_id}\n"
                f"‚è≥ –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –±–∞–Ω—É: {entry.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚åõÔ∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days}–¥ {hours}–≥\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {entry.reason}\n\n"
            )
        await update.message.reply_text(blacklist_text)


async def answer_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ä–µ–ø–æ—Ä—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if update.effective_user.id not in ADMIN_IDS:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /ans, –∞–ª–µ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ans <user_id> <text>")
        return

    try:
        user_id = int(args[0])
        answer_text = " ".join(args[1:])
    except ValueError:
        await update.message.reply_text(
            "‚ùó–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id —Ç–∞ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
        )
        logging.warning(
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d –≤–≤—ñ–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id: %s",
            update.effective_user.id,
            args[0],
        )
        return

    try:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await context.bot.send_message(
            chat_id=user_id, text=f"üì¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:\n\n{answer_text}"
        )

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ
        await update.message.reply_text(
            f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}."
        )

        logging.info(
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %d (%s).",
            update.effective_user.id,
            user_id,
            answer_text,
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {str(e)}")
        logging.error(
            "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ %d –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %d: %s",
            update.effective_user.id,
            user_id,
            str(e),
        )


async def check_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /check_stats, –∞–ª–µ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    total_requests = sum(daily_stats.values())

    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now():%d/%m/%Y}:\n\n"
        f"üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è: {daily_stats['announcement']}\n"
        f"üéØ –†–µ–∫–ª–∞–º–∞: {daily_stats['advertising']}\n"
        f"üí∞ –ü—Ä–æ–¥–∞–∂—ñ: {daily_stats['selling']}\n"
        f"üõí –ö—É–ø—ñ–≤–ª—è: {daily_stats['buying']}\n"
        f"üìà –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: {total_requests}"
    )

    await update.message.reply_text(stats_message)
    logging.info("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", update.effective_user.id)


async def send_daily_stats(application):
    logging.info("–ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    total_requests = sum(daily_stats.values())

    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now():%d/%m/%Y}:\n\n"
        f"üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è: {daily_stats['announcement']}\n"
        f"üéØ –†–µ–∫–ª–∞–º–∞: {daily_stats['advertising']}\n"
        f"üí∞ –ü—Ä–æ–¥–∞–∂—ñ: {daily_stats['selling']}\n"
        f"üõí –ö—É–ø—ñ–≤–ª—è: {daily_stats['buying']}\n"
        f"üìà –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: {total_requests}"
    )

    for admin_id in ADMIN_IDS:
        try:
            await application.bot.send_message(chat_id=admin_id, text=stats_message)
            logging.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É %d", admin_id)
        except Exception as e:
            logging.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º—ñ–Ω—É %d: %s", admin_id, e)

    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


def reset_daily_stats():
    """–°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    daily_stats.update({key: 0 for key in daily_stats})
    logging.info("–©–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∏–Ω—É—Ç–∞.")


async def reset_counters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –æ–≥–æ–ª–æ—à–µ–Ω—å —Ç–∞ —Ä–µ–ø–æ—Ä—Ç—ñ–≤ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /reset_counters, –∞–ª–µ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    args = context.args
    if len(args) != 1:
        await update.message.reply_text("‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reset_counters <user_id>")
        return

    try:
        user_id = int(args[0])
    except ValueError:
        await update.message.reply_text(
            "‚ùó–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id (—á–∏—Å–ª–æ)."
        )
        logging.warning(
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d –≤–≤—ñ–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id: %s",
            update.effective_user.id,
            args[0],
        )
        return

    if user_id not in user_post_counts and user_id not in user_report_counts:
        await update.message.reply_text("‚ùó–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤.")
        logging.info(
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d —Å–ø—Ä–æ–±—É–≤–∞–≤ —Å–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d, –∞–ª–µ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.",
            update.effective_user.id,
            user_id,
        )
        return

    user_post_counts.pop(user_id, None)
    user_report_counts.pop(user_id, None)

    await update.message.reply_text(
        f"üîÑ –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –±—É–ª–∏ —Å–∫–∏–Ω—É—Ç—ñ."
    )
    logging.info(
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d —Å–∫–∏–Ω—É–≤ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.",
        update.effective_user.id,
        user_id,
    )


async def view_counters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –æ–≥–æ–ª–æ—à–µ–Ω—å —Ç–∞ —Ä–µ–ø–æ—Ä—Ç—ñ–≤ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /view_counters, –∞–ª–µ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    args = context.args
    if len(args) != 1:
        await update.message.reply_text("‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /view_counters <user_id>")
        return

    try:
        user_id = int(args[0])
    except ValueError:
        await update.message.reply_text(
            "‚ùó–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id (—á–∏—Å–ª–æ)."
        )
        logging.warning(
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d –≤–≤—ñ–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id: %s",
            update.effective_user.id,
            args[0],
        )
        return

    post_data = user_post_counts.get(
        user_id, {"count": 0, "reset_time": datetime.now()}
    )
    report_data = user_report_counts.get(
        user_id, {"count": 0, "reset_time": datetime.now()}
    )

    response = (
        f"üìä –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id}:\n"
        f"üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è: {post_data['count']}/{5} (—Å–∫–∏–¥–∞—î—Ç—å—Å—è –æ {post_data['reset_time'] + timedelta(days=1):%Y-%m-%d %H:%M:%S})\n"
        f"üìù –†–µ–ø–æ—Ä—Ç–∏: {report_data['count']}/{10} (—Å–∫–∏–¥–∞—î—Ç—å—Å—è –æ {report_data['reset_time'] + timedelta(days=1):%Y-%m-%d %H:%M:%S})"
    )

    await update.message.reply_text(response)
    logging.info(
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.",
        update.effective_user.id,
        user_id,
    )


async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /list_users, –∞–ª–µ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    users_with_posts = [str(user_id) for user_id in user_post_counts.keys()]
    users_with_reports = [str(user_id) for user_id in user_report_counts.keys()]

    response = "üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏:\n\n"
    response += (
        f"üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è ({len(users_with_posts)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤):\n"
        + ", ".join(users_with_posts)
        + "\n\n"
    )
    response += f"üìù –†–µ–ø–æ—Ä—Ç–∏ ({len(users_with_reports)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤):\n" + ", ".join(
        users_with_reports
    )

    await update.message.reply_text(
        response
        if users_with_posts or users_with_reports
        else "‚ùó–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏."
    )
    logging.info(
        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä %d –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞–º–∏.",
        update.effective_user.id,
    )


def reset_all_counters():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤."""
    current_time = datetime.now()
    for user_id in list(user_post_counts.keys()):
        user_post_counts[user_id]["count"] = 0
        user_post_counts[user_id]["reset_time"] = current_time

    for user_id in list(user_report_counts.keys()):
        user_report_counts[user_id]["count"] = 0
        user_report_counts[user_id]["reset_time"] = current_time

    logging.info("–í—Å—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –±—É–ª–∏ —Å–∫–∏–Ω—É—Ç—ñ.")


# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞


async def mod_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."""
    if update.effective_user.id not in MODERATOR_IDS:
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /mod_help, –∞–ª–µ –Ω–µ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    response = (
        "‚úÖ /buy_accept <user_id> - –°—Ö–≤–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –∫—É–ø—ñ–≤–ª—é\n"
        "‚úÖ /sell_accept <user_id> - –°—Ö–≤–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂\n"
        "‚úÖ /ad_accept <user_id> - –°—Ö–≤–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "‚úÖ /an_accept <user_id> - –°—Ö–≤–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É\n\n"
        "‚ùå /buy_reject <user_id> <reason> - –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –∫—É–ø—ñ–≤–ª—é\n"
        "‚ùå /sell_reject <user_id> <reason> - –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂\n"
        "‚ùå /ad_reject <user_id> <reason> - –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "‚ùå /an_reject <user_id> <reason> - –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É\n\n"
        "üí≥ /payment <user_id> <service_id> <sum> - –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ–ø–ª–∞—Ç–∏\n\n"
        "Service ID's:\n"
        "1 - –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ 3 –¥–æ–±–∏\n"
        "2 - –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è\n"
        "3 - –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 12 –≥–æ–¥–∏–Ω\n"
        "4 - –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 1 –¥–æ–±—É\n"
        "5 - –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 3 –¥–æ–±–∏\n"
        "6 - –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 7 –¥—ñ–±\n"
        "7 - –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 12 –≥–æ–¥–∏–Ω\n"
        "8 - –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 1 –¥–æ–±—É\n"
        "9 - –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 3 –¥–æ–±–∏\n"
        "10 - –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 7 –¥—ñ–±"
    )

    await update.message.reply_text(response)
    logging.info("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.", update.effective_user.id)


# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤


async def payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤ –¥–ª—è –æ–ø–ª–∞—Ç–∏."""
    if update.effective_user.id not in MODERATOR_IDS:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /payment, –∞–ª–µ –Ω–µ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if len(context.args) != 3:
        if update.message:
            await update.message.reply_text(
                "‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /payment <user_id> <service_id> <amount>"
            )
        return

    try:
        user_id = int(context.args[0])
        id_prod = int(context.args[1])
        amount = float(context.args[2])

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ id_prod
        services = {
            1: "–∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ 3 –¥–æ–±–∏",
            2: "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è",
            3: "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 12 –≥–æ–¥–∏–Ω",
            5: "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 1 –¥–æ–±—É",
            6: "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 3 –¥–æ–±–∏",
            7: "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 7 –¥—ñ–±",
            8: "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 12 –≥–æ–¥–∏–Ω",
            9: "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 1 –¥–æ–±—É",
            10: "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 3 –¥–æ–±–∏",
            11: "–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è + –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è + —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ 7 –¥—ñ–±",
        }

        service_description = services.get(id_prod)
        if not service_description:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π service_id.")
            return

        message = (
            f"üíº –í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∑–∞–ø–∏—Ç –Ω–∞ –ø–ª–∞—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏, –∞ —Å–∞–º–µ: {service_description}.\n"
            f"üí≥ –î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó - –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –æ–ø–ª–∞—Ç—É –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –∫–∞—Ä—Ç–∫—É: \n"
            f"`{PAYMENT_CARD}`\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: `{amount}` –≥—Ä–Ω.\n"
            f"üìù –£ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∫–∞–∂—ñ—Ç—å:\n"
            f"`–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª—É–≥–∏ ‚Ññ{user_id}`\n"
            "‚è≥ –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏, –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑'—è–≤–∏—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 24-—Ö –≥–æ–¥–∏–Ω, –∞ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n"
            "üôè –î—è–∫—É—î–º–æ, —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—è –Ω–∞—à–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏!"
        )

        await context.bot.send_message(
            chat_id=user_id, text=message, parse_mode=constants.ParseMode.MARKDOWN
        )

        logging.info(
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ–ø–ª–∞—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.",
            update.effective_user.id,
            user_id,
        )
        if update.message:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}."
            )
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—è.")
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
            )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤: %s", e)


async def buy_accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–ø–∏—Ç—É –Ω–∞ –∫—É–ø—ñ–≤–ª—é."""
    if update.effective_user.id not in MODERATOR_IDS:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /buy_accept, –∞–ª–µ –Ω–µ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if not context.args or len(context.args) != 1:
        if update.message:
            await update.message.reply_text("‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /buy_accept <user_id>")
        return

    try:
        user_id = int(context.args[0])

        message = (
            "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∫—É–ø—ñ–≤–ª—é —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.\n"
            "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:\n"
            "üì¢ @slavuta_ads"
        )

        await context.bot.send_message(chat_id=user_id, text=message)

        logging.info(
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d —Å—Ö–≤–∞–ª–∏–≤ –∑–∞–ø–∏—Ç –Ω–∞ –∫—É–ø—ñ–≤–ª—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.",
            update.effective_user.id,
            user_id,
        )

        if update.message:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}"
            )
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id")
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
            )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è: %s", e)


async def sell_accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–ø–∏—Ç—É –Ω–∞ –ø—Ä–æ–¥–∞–∂."""
    if update.effective_user.id not in MODERATOR_IDS:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /sell_accept, –∞–ª–µ –Ω–µ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if not context.args or len(context.args) != 1:
        if update.message:
            await update.message.reply_text("‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /sell_accept <user_id>")
        return

    try:
        user_id = int(context.args[0])
        message = (
            "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.\n"
            "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:\n"
            "üì¢ @slavuta_ads"
        )
        await context.bot.send_message(chat_id=user_id, text=message)

        logging.info(
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d —Å—Ö–≤–∞–ª–∏–≤ –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.",
            update.effective_user.id,
            user_id,
        )

        if update.message:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}"
            )
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id")
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
            )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è: %s", e)


async def ad_accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–ø–∏—Ç—É –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    # –¢—É—Ç

    if update.effective_user.id not in MODERATOR_IDS:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /ad_accept, –∞–ª–µ –Ω–µ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if not context.args or len(context.args) != 1:
        if update.message:
            await update.message.reply_text("‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ad_accept <user_id>")
        return

    try:
        user_id = int(context.args[0])
        message = (
            "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.\n"
            "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:\n"
            "üì¢ @slavuta_ads"
        )
        await context.bot.send_message(chat_id=user_id, text=message)

        logging.info(
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d —Å—Ö–≤–∞–ª–∏–≤ –∑–∞–ø–∏—Ç –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.",
            update.effective_user.id,
            user_id,
        )

        if update.message:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}"
            )
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id")
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
            )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è: %s", e)


async def an_accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–ø–∏—Ç—É –Ω–∞ —Ä–µ–∫–ª–∞–º—É."""
    if update.effective_user.id not in MODERATOR_IDS:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /an_accept, –∞–ª–µ –Ω–µ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if not context.args or len(context.args) != 1:
        if update.message:
            await update.message.reply_text("‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /an_accept <user_id>")
        return

    try:
        user_id = int(context.args[0])
        message = (
            "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.\n"
            "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:\n"
            "üì¢ @slavuta_ads"
        )
        await context.bot.send_message(chat_id=user_id, text=message)

        logging.info(
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d —Å—Ö–≤–∞–ª–∏–≤ –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.",
            update.effective_user.id,
            user_id,
        )

        if update.message:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}"
            )
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id")
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
            )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è: %s", e)


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
async def buy_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –∫—É–ø—ñ–≤–ª—é."""
    if update.effective_user.id not in MODERATOR_IDS:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /buy_reject <user_id> <reason>"
        )
        return

    try:
        user_id = int(context.args[0])
        reason = " ".join(context.args[1:])
        message = (
            "‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∫—É–ø—ñ–≤–ª—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:\n"
            "üì¢ @slavuta_ads"
        )
        await context.bot.send_message(chat_id=user_id, text=message)

        logging.info(
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞–ø–∏—Ç –Ω–∞ –∫—É–ø—ñ–≤–ª—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.\n"
            "–ü—Ä–∏—á–∏–Ω–∞: %s",
            update.effective_user.id,
            user_id,
            reason,
        )

        if update.message:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}"
            )
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id")
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
            )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: %s", e)


async def sell_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –ø—Ä–æ–¥–∞–∂."""
    if update.effective_user.id not in MODERATOR_IDS:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /sell_reject, –∞–ª–µ –Ω–µ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /sell_reject <user_id> <reason>"
        )
        return

    try:
        user_id = int(context.args[0])
        reason = " ".join(context.args[1:])
        message = (
            "‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:\n"
            "üì¢ @slavuta_ads"
        )
        await context.bot.send_message(chat_id=user_id, text=message)

        logging.info(
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.\n" "–ü—Ä–∏—á–∏–Ω–∞: %s",
            update.effective_user.id,
            user_id,
            reason,
        )

        if update.message:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}"
            )
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id")
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
            )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: %s", e)


async def ad_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    if update.effective_user.id not in MODERATOR_IDS:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /ad_reject, –∞–ª–µ –Ω–µ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if len(context.args) < 2:
        if update.message:
            await update.message.reply_text(
                "‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /ad_reject <user_id> <reason>"
            )
        return

    try:
        user_id = int(context.args[0])
        reason = " ".join(context.args[1:])
        message = (
            "‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:\n"
            "üì¢ @slavuta_ads"
        )
        await context.bot.send_message(chat_id=user_id, text=message)

        logging.info(
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞–ø–∏—Ç –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d. –ü—Ä–∏—á–∏–Ω–∞: %s",
            update.effective_user.id,
            user_id,
            reason,
        )

        if update.message:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}"
            )
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id")
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
            )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: %s", e)


async def an_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ —Ä–µ–∫–ª–∞–º—É."""
    if update.effective_user.id not in MODERATOR_IDS:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        logging.warning(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %d –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /an_reject, –∞–ª–µ –Ω–µ —î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            update.effective_user.id,
        )
        return

    if len(context.args) < 2:
        if update.message:
            await update.message.reply_text(
                "‚ùó–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /an_reject <user_id> <reason>"
            )
        return

    try:
        user_id = int(context.args[0])
        reason = " ".join(context.args[1:])
        message = (
            "‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            "üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ:\n"
            "üì¢ @slavuta_ads"
        )
        await context.bot.send_message(chat_id=user_id, text=message)

        logging.info(
            "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä %d –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d.\n"
            "–ü—Ä–∏—á–∏–Ω–∞: %s",
            update.effective_user.id,
            user_id,
            reason,
        )

        if update.message:
            await update.message.reply_text(
                "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %d", user_id
            )
    except ValueError:
        if update.message:
            await update.message.reply_text("‚ùó–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id")
    except Exception as e:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
            )
        logging.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: %s", str(e))


def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    check_time()

    # –ì–æ–ª–æ–≤–Ω–∏–π ConversationHandler –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ –±–æ—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("report", report_command),
        ],
        states={
            CHOOSING_ACTION: [
                MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data),
                CommandHandler("report", report_command),
            ],
            AWAITING_REPORT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_report),
                CommandHandler("start", start),
            ],
            AWAITING_PHOTOS: [
                MessageHandler(
                    filters.PHOTO | (filters.TEXT & ~filters.COMMAND), handle_photo
                ),
                CommandHandler("start", start),
            ],
        },
        fallbacks=[
            CommandHandler("start", start),
            CommandHandler("report", report_command),
        ],
        per_message=False,
    )

    # 1. Middleware handlers
    application.add_handler(MessageHandler(filters.ALL, blacklist_middleware), group=-1)
    application.add_handler(conv_handler)

    # 2. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    moderation_handlers = [
        CommandHandler("ban", ban_user),
        CommandHandler("unban", unban_user),
        CommandHandler("blacklist", view_blacklist),
        CommandHandler("ans", answer_report),
    ]
    for handler in moderation_handlers:
        application.add_handler(handler)

    # 3. –ö–æ–º–∞–Ω–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    management_handlers = [
        CommandHandler("reset_counters", reset_counters),
        CommandHandler("view_counters", view_counters),
        CommandHandler("list_users", list_users),
        CommandHandler("check_stats", check_stats),
    ]
    for handler in management_handlers:
        application.add_handler(handler)

    # 4. –î–æ–≤—ñ–¥–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("adm_help", adm_help))
    application.add_handler(CommandHandler("mod_help", mod_help))

    # 5. –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—ñ–≤
    application.add_handler(CommandHandler("payment", payment))

    # 6. –ö–æ–º–∞–Ω–¥–∏ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞—è–≤–æ–∫
    acceptance_handlers = [
        CommandHandler("buy_accept", buy_accept),
        CommandHandler("sell_accept", sell_accept),
        CommandHandler("ad_accept", ad_accept),
        CommandHandler("an_accept", an_accept),
    ]
    for handler in acceptance_handlers:
        application.add_handler(handler)

    # 7. –ö–æ–º–∞–Ω–¥–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫
    rejection_handlers = [
        CommandHandler("buy_reject", buy_reject),
        CommandHandler("sell_reject", sell_reject),
        CommandHandler("ad_reject", ad_reject),
        CommandHandler("an_reject", an_reject),
    ]
    for handler in rejection_handlers:
        application.add_handler(handler)

    # 8. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –±–æ—Ç–∞
    application.job_queue.run_repeating(
        callback=lambda context: check_bans(context.bot),
        interval=3600,  # –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
        first=10,  # –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É
    )

    # 9. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    scheduler = BackgroundScheduler()

    # –©–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    daily_jobs = [
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ 23:59
        {
            "func": lambda: asyncio.run(send_daily_stats(application)),
            "trigger": "cron",
            "hour": 23,
            "minute": 59,
        },
        # –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ 00:00
        {"func": reset_daily_stats, "trigger": "cron", "hour": 0, "minute": 0},
        # –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        {"func": reset_all_counters, "trigger": "cron", "hour": 0, "minute": 0},
    ]

    for job in daily_jobs:
        scheduler.add_job(
            job["func"],
            job["trigger"],
            hour=job["hour"],
            minute=job["minute"],
            timezone="Europe/Kyiv",
        )

    # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
    scheduler.add_job(check_bot_status, "interval", minutes=30)
    scheduler.add_listener(handle_scheduler_error, EVENT_JOB_ERROR)

    # 10. –ó–∞–ø—É—Å–∫ —É—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    nest_asyncio.apply()
    scheduler.start()
    logging.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")

    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    Thread(target=run_flask).start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
